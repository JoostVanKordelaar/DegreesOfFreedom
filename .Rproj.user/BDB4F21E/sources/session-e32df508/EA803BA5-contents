
updateValues <- function(input,statMean){
  if (input$fixMean){
    yData <- c(input$n1,input$n2,input$n3,input$n4,input$n5,input$n6)
    fixedValue <- -sum(yData) + statMean*7
    yData <- c(yData,fixedValue)
    meanData <- rep(statMean,7)
  } else {
    yData <- c(input$n1,input$n2,input$n3,input$n4,input$n5,input$n6,input$n7)
    meanData <- rep(mean(yData),7)
  }
  values <- list(yData = yData,meanData = meanData)
  return(values)
}

#' @export
dof <- function(){
  # Define UI for application that draws a histogram
  ui <- shiny::fluidPage(

    # Application title
    shiny::titlePanel("Constraints on the data determine Degrees of Freedom"),

    # Tabpanel
    shiny::tabsetPanel(
      shiny::tabPanel("One-sample t-test",

                      # Initiate sidebarlay-out
                      shiny::sidebarLayout(
                        # Iniate sidebar panel
                        shiny::sidebarPanel(

                          # Add checkbox to fix mean
                          shiny::checkboxInput("fixMean", "Fix mean:"),

                          # Add sliders
                          #n1
                          shiny::sliderInput("n1", "n1:",
                                             min = -5, max = 5,step = 0.01,
                                             value = 0),
                          #n2
                          shiny::sliderInput("n2", "n2:",
                                             min = -5, max = 5,step = 0.01,
                                             value = 0),
                          #n3
                          shiny::sliderInput("n3", "n3:",
                                             min = -5, max = 5,step = 0.01,
                                             value = 0),
                          #n4
                          shiny::sliderInput("n4", "n4:",
                                             min = -5, max = 5,step = 0.01,
                                             value = 0),
                          #n5
                          shiny::sliderInput("n5", "n5:",
                                             min = -5, max = 5,step = 0.01,
                                             value = 0),
                          #n6
                          shiny::sliderInput("n6", "n6:",
                                             min = -5, max = 5,step = 0.01,
                                             value = 0),
                          #n7
                          shiny::sliderInput("n7", "n7:",
                                             min = -5, max = 5,step = 0.01,
                                             value = 0),
                        ),

                        # Show a plot of the data sliders
                        # but first initiate a main panel
                        shiny::mainPanel(
                          # show the plot
                          shiny::plotOutput("dataPlot")
                        )
                      )
      ),
      shiny::tabPanel("Chi-squared test")
    )
  )

  # Define server logic required to plot the data
  server <- function(input, output) {

    statMean <- bindEvent(
      reactive({
        statMean <- mean(c(input$n1,input$n2,input$n3,input$n4,input$n5,input$n6,input$n7))
      }),input$fixMean
    )

    values <- reactive({
      values <- updateValues(input,statMean())
      return(values)
    })

    output$dataPlot <- shiny::renderPlot({

      yData <- values()$yData
      meanData <- values()$meanData
      sliderData <- data.frame(xData = 1:7,yData = yData,meanData = meanData)

      # draw the scatter plot with the data points defined by the sliders
      p <- ggplot2::ggplot(data = sliderData) +
        ggplot2::geom_point(mapping = ggplot2::aes(x=xData,y=yData),size = 5) +
        ggplot2::geom_line(mapping = ggplot2::aes(x=xData,y=meanData,colour = "red"),linewidth = 2) +
        ggplot2::coord_cartesian(xlim = c(0,8),ylim = c(-10,10)) +
        ggplot2::xlab("n") +
        ggplot2::ylab("values") +
        ggplot2::ggtitle("Values for Each Data Point") +
        ggplot2::theme(legend.position="none",
                       axis.text=ggplot2::element_text(size=12),
                       axis.title=ggplot2::element_text(size=14,face="bold"),
                       plot.title = ggplot2::element_text(hjust = 0.5))

      if (input$fixMean){
        p <- p +
          ggplot2::geom_point(data = tail(sliderData,1),
                              mapping = ggplot2::aes(x=xData,y=yData),
                              size = 5,
                              colour = "red")
      }

      p
    })
  }

  # Run the application
  shiny::shinyApp(ui = ui, server = server)
}
