
extractDataAndComputeMean <- function(input,statMean){
  fixMean <- input$fixMean
  if (fixMean){ # then extract mean and compute value of the last data point
    meanValue <- statMean
    yData <- c(input$n1,input$n2,input$n3,input$n4,input$n5,input$n6)
    fixedValue <- -sum(yData) + meanValue*7
    yData <- c(yData,fixedValue)
    meanData <- rep(meanValue,7)
  } else { # then compute mean
    yData <- c(input$n1,input$n2,input$n3,input$n4,input$n5,input$n6,input$n7)
    meanData <- rep(mean(yData),7)
  }
  myList = list(yData=yData,meanData=meanData)
  return(myList)
}

#' @export
dof <- function(){
  # Define UI for application that draws a histogram
  ui <- shiny::fluidPage(

    # Application title
    shiny::titlePanel("Constraints on the data determine Degrees of Freedom"),

    # Initiate sidebar lay-out
    shiny::sidebarLayout(
      # Initiate sidebar panel
      shiny::sidebarPanel(

        # # show mean
        # shiny::numericInput("currentMean", "Current mean", value = 0),

        # fix or unfix mean
        shiny::checkboxInput("fixMean","Fix mean"),

        # Add sliders
        #n1
        shiny::sliderInput("n1", "n1:",
                           min = -5, max = 5,step = 0.01,
                           value = 0),
        #n2
        shiny::sliderInput("n2", "n2:",
                           min = -5, max = 5,step = 0.01,
                           value = 0),
        #n3
        shiny::sliderInput("n3", "n3:",
                           min = -5, max = 5,step = 0.01,
                           value = 0),
        #n4
        shiny::sliderInput("n4", "n4:",
                           min = -5, max = 5,step = 0.01,
                           value = 0),
        #n5
        shiny::sliderInput("n5", "n5:",
                           min = -5, max = 5,step = 0.01,
                           value = 0),
        #n6
        shiny::sliderInput("n6", "n6:",
                           min = -5, max = 5,step = 0.01,
                           value = 0),
        #n7
        shiny::sliderInput("n7", "n7:",
                           min = -5, max = 5,step = 0.01,
                           value = 0),
      ),

      # Show a plot of the data sliders
      # but first initiate a main panel
      shiny::mainPanel(
        # show the plot
        shiny::plotOutput("dataPlot")
      )
    )
  )

  # Define server logic required to plot the data
  server <- function(input, output, session) {

    # observe({
    #   if (input$fixMean){
    #     valueN7 <- tail(values()$yData,n=1)
    #     updateSliderInput(session, "n7", value = valueN7)
    #   }
    #   valueMean <- head(values()$meanData,n=1)
    #   updateNumericInput(session, "currentMean", value = valueMean)
    # })

    statMean <- bindEvent(reactive({
      fixMean <- mean(c(input$n1,input$n2,input$n3,input$n4,input$n5,input$n6,input$n7))
    }),input$fixMean)

    values <- shiny::reactive({
      myList <- extractDataAndComputeMean(input,statMean())
      return(myList)
    })

    output$dataPlot <- shiny::renderPlot({
      # generate bins based on input$bins from ui.R
      yData <- values()$yData
      meanData <- values()$meanData
      if (length(yData)==0){ # This is the case during initiation of the app
        yData <- rep(0,7)
        meanData <- rep(0,7)
      }
      sliderData <- data.frame(xData = 1:7,yData = yData,meanData = meanData)

      # draw the scatter plot with the data points defined by the sliders
      p <- ggplot2::ggplot(data = sliderData) +
        ggplot2::geom_point(mapping = ggplot2::aes(x=xData,y=yData),size = 5) +
        ggplot2::coord_cartesian(xlim = c(0,8),ylim = c(-12,12))

      p <- p +
        ggplot2::geom_line(mapping = ggplot2::aes(x=xData,y=meanData),linewidth = 2,colour = "red")
      p
    })
  }

  # Run the application
  shiny::shinyApp(ui = ui, server = server)
}
